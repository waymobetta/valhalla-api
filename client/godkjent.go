// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "valhalla": godkjent Resource Client
//
// Command:
// $ goagen
// --design=github.com/waymobetta/valhalla-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/valhalla-api
// --version=v1.4.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// LeggeTilGodkjentPath computes a request path to the leggeTil action of godkjent.
func LeggeTilGodkjentPath() string {

	return fmt.Sprintf("/v1/godkjent")
}

// Legge til en godjkent
func (c *Client) LeggeTilGodkjent(ctx context.Context, path string, payload *LeggeTilGodkjentNyttelast, contentType string) (*http.Response, error) {
	req, err := c.NewLeggeTilGodkjentRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLeggeTilGodkjentRequest create the request corresponding to the leggeTil action endpoint of the godkjent resource.
func (c *Client) NewLeggeTilGodkjentRequest(ctx context.Context, path string, payload *LeggeTilGodkjentNyttelast, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// VisGodkjentPath computes a request path to the vis action of godkjent.
func VisGodkjentPath() string {

	return fmt.Sprintf("/v1/godkjent")
}

// vis godkjent
func (c *Client) VisGodkjent(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewVisGodkjentRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewVisGodkjentRequest create the request corresponding to the vis action endpoint of the godkjent resource.
func (c *Client) NewVisGodkjentRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
