// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "valhalla": Application User Types
//
// Command:
// $ goagen
// --design=github.com/waymobetta/valhalla-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/valhalla-api
// --version=v1.4.1

package client

import (
	"github.com/goadesign/goa"
)

// Legge til godkjent p책 listen
type leggeTilGodkjentNyttelast struct {
	// Ethereum adresse
	Adresse *string `form:"adresse,omitempty" json:"adresse,omitempty" yaml:"adresse,omitempty" xml:"adresse,omitempty"`
	// Navn p책 godkjent
	Navn *string `form:"navn,omitempty" json:"navn,omitempty" yaml:"navn,omitempty" xml:"navn,omitempty"`
	// Secret phrase
	Secret *string `form:"secret,omitempty" json:"secret,omitempty" yaml:"secret,omitempty" xml:"secret,omitempty"`
}

// Validate validates the leggeTilGodkjentNyttelast type instance.
func (ut *leggeTilGodkjentNyttelast) Validate() (err error) {
	if ut.Navn == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "navn"))
	}
	if ut.Adresse == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "adresse"))
	}
	if ut.Secret == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "secret"))
	}
	return
}

// Publicize creates LeggeTilGodkjentNyttelast from leggeTilGodkjentNyttelast
func (ut *leggeTilGodkjentNyttelast) Publicize() *LeggeTilGodkjentNyttelast {
	var pub LeggeTilGodkjentNyttelast
	if ut.Adresse != nil {
		pub.Adresse = *ut.Adresse
	}
	if ut.Navn != nil {
		pub.Navn = *ut.Navn
	}
	if ut.Secret != nil {
		pub.Secret = *ut.Secret
	}
	return &pub
}

// Legge til godkjent p책 listen
type LeggeTilGodkjentNyttelast struct {
	// Ethereum adresse
	Adresse string `form:"adresse" json:"adresse" yaml:"adresse" xml:"adresse"`
	// Navn p책 godkjent
	Navn string `form:"navn" json:"navn" yaml:"navn" xml:"navn"`
	// Secret phrase
	Secret string `form:"secret" json:"secret" yaml:"secret" xml:"secret"`
}

// Validate validates the LeggeTilGodkjentNyttelast type instance.
func (ut *LeggeTilGodkjentNyttelast) Validate() (err error) {
	if ut.Navn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "navn"))
	}
	if ut.Adresse == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "adresse"))
	}
	if ut.Secret == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "secret"))
	}
	return
}
