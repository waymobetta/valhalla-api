// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "valhalla": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/waymobetta/valhalla-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/valhalla-api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// LeggeTilGodkjentContext provides the godkjent leggeTil action context.
type LeggeTilGodkjentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LeggeTilGodkjentNyttelast
}

// NewLeggeTilGodkjentContext parses the incoming request URL and body, performs validations and creates the
// context used by the godkjent controller leggeTil action.
func NewLeggeTilGodkjentContext(ctx context.Context, r *http.Request, service *goa.Service) (*LeggeTilGodkjentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LeggeTilGodkjentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LeggeTilGodkjentContext) OK(r *Godkjent) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.godkjent+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *LeggeTilGodkjentContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LeggeTilGodkjentContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VisGodkjentContext provides the godkjent vis action context.
type VisGodkjentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewVisGodkjentContext parses the incoming request URL and body, performs validations and creates the
// context used by the godkjent controller vis action.
func NewVisGodkjentContext(ctx context.Context, r *http.Request, service *goa.Service) (*VisGodkjentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VisGodkjentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VisGodkjentContext) OK(r *Godkjentliste) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.godkjentliste+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VisGodkjentContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *VisGodkjentContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VisHelseContext provides the helse vis action context.
type VisHelseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewVisHelseContext parses the incoming request URL and body, performs validations and creates the
// context used by the helse controller vis action.
func NewVisHelseContext(ctx context.Context, r *http.Request, service *goa.Service) (*VisHelseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VisHelseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VisHelseContext) OK(r *Helse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.helse+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VisHelseContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *VisHelseContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
